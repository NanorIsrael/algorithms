"""Return the sum of two integers.

   >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

    case when a standard matrix is given
   >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
   [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    case when a matrix containing strings is given
    >>> matrix_divided([[1, "2", 3], [4, 5, "6"]], 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    case when a matrix containing 0 as value/strings is given
    >>> matrix_divided([[1, 2, 0], [4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero
    
    case when a matrix containing an empty list is given
    >>> matrix_divided([], 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    case when a divisor is not given
    >>> matrix_divided([[1, 2, 0], [4, 5, 6]])
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
 
    case when a list length is not the same
    >>> matrix_divided([[1, 2, 3], [4, 5, 6, 8]], 3)
    Traceback (most recent call last):
        ...
    NameError: Each row of the matrix must have the same size
 
    case when a list length is not the same
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "3")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    >>> print(matrix_divided(None, 3))
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    """